/*
 * This source file was generated by the Gradle 'init' task
 */
package taller4;



public class App {
    

    public static void main(String[] args) {
        
        //Coloque los llamados a cada función de acuerdo con cada enunciado
        //codifique el control de errores para el main

        //Punto 1
        System.out.println(numerosImpares(100));
        //Punto 2
        System.out.println(serieFibonacci(20));
        //Punto 3
        final byte min = 20, max = 30;
        byte cant_llamadas = (byte)(Math.random() * (max - min) + min);
            for(byte llamada = 0; llamada < cant_llamadas; llamada ++){
                double resultado = raizAleatoria();
                System.out.println("Raíz cuadrada calculada; " + resultado);
            }
        //Punto 4
        System.out.println(numerosPares(2,40));
        //Punto 5
        System.out.println(totalSuma(9));
        //Punto 6
        System.out.println(loteria());

    }

    /* TODAS LAS FUNCIONES DEBEN LLEVAR CONTROL DE ERRORES, SI EL ENUNCIADO NO LO ESPECIFICA, LO DEBES PONER
     * DE ACUERDO CON TU CRITERIO
     */

    /* 
     * 1.	Escriba una función que reciba un entero positivo entre 100 y 500 y retorne en un texto todos los números impares desde 1 
     * hasta ese número separados por comas en grupos de hasta 8 números.
     * 
    */

    public static String numerosImpares(int numero){

        try {
            
            final short num_min = 100, num_max = 500;
            final byte salto_lin = 8, k_suma = 2;
            String resultado = "";
            short contador = 1;

            if(numero < num_min || numero > num_max)
                return "El numero ingresado tiene que estar entre" + num_min + " y " + num_max;

            for(int var = 1; var < numero; var ++){

                if (var % k_suma != 0){
                    resultado += (var);

                    if (contador % salto_lin == 0) 
                        resultado += ",\n"; 
                    else
                        resultado += ", "; 

                    contador ++;
                }

            }
            return "numeros impares: \n" + resultado;
            
        } 
        
        catch (Exception e) {
            return "Ocurrio un eror en el programa /n" + e;
        }

    }

    /* 2. 	Escriba una función que reciba un entero N mayor de 2  y retorne un string cono esos N términos de la 
    serie de Fibonacci (La sucesión de Fibonacci se trata de una serie infinita de números naturales que empieza con un 0 y un 1 
    y continúa añadiendo números que son la suma de los dos anteriores: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 
    987, 1597…)
     * 
     * 
    */

    public static String serieFibonacci(int numero){

        try {

            final byte limite_inferior = 2;
            int n1 = 0, n2 = 1, n3;
            String resultado = n1 + ", " + n2;

            if (numero <= limite_inferior){
                return "El número debe ser mayor de 2";
            }

            for (int sucesión = 3; sucesión <= numero; sucesión ++){
                n3 = n1 + n2;
                resultado += ", " + n3;
                n1 = n2;
                n2 = n3;
            }
            
            return "Serie de Fibonacci: " + resultado;
        } 
        
        catch (Exception e) {
            return "Ocurrio un eror en el programa /n" + e;
        }

    }
    
    /* 
     * 3.	Diseñar y desarrollar una función que NO reciba datos de entrada, genere aleatoriamente un número entre 2 y 355, 
       le calcule su raíz cuadrada y retorne este valor. Para calcular las raíces usar la función Sqrt de la biblioteca Math.

       En el main, antes de invocar la función, se debe calcular un aleatorio entre 20 y 30 el cual establecerá la cantidad 
       de veces que va a llamar a la función y en un ciclo, mostrar los resultados.

    */

    public static double raizAleatoria(){

        try {
            
            final short lim_min = 2, lim_max = 355;
            int num_alea = (int)(Math.random() * (lim_max - lim_min) + lim_min);
            return Math.sqrt(num_alea);
        
        } 
        
        catch (Exception e) {
            System.out.println("Ocurrio un error en el programa /n" + e);
            return -1;
        }

    }

    /*4.	Diseñar y desarrollar una función que reciba un valor inicial y un valor final, para generar 900 números aleatorios 
        en este rango y retorne un texto que diga cuántos números pares fueron generados. Controle que el nro inicial sea menor que 
        nro final para establecer el rango.

        Llame la función desde el main e imprimir el resultado arrojado.
    */

    public static String numerosPares(int var_inicial, int var_final){

        try {
            
            final short cant_alea = 900;
            final byte k_dos = 2, k_cero = 0; 
            short cant_pares = 0;
            int num_alea = 0;

            if(var_inicial >= var_final)
                return "El primer valor debe ser mayor al segundo valor";

                for(short var = 0; var < cant_alea; var ++){
                    num_alea = (short)(Math.random()*(var_final - var_inicial) + var_inicial);
                    if(num_alea % k_dos == k_cero)
                        cant_pares ++;
                }
            
            return "La cantidad de numeros pares es: " + cant_pares;
        } 
        
        catch (Exception e) {
            return "Ocurrio un error en el programa /n" + e;
        }

    }

    /* 5.	Diseñar y desarrollar una función que calcule una cantidad de números aleatorios que viene como parámetro de entrada 
        y los sume.  La función deberá retornar el total de la suma. Usted defina los rangos que va a usar en el cálculo.

        Llame la función desde el main e imprimir el resultado arrojado.
      
    */

    public static int totalSuma(int cantidad){

        try {

            final short lim_inf = 1, lim_sup = 10; 
            int sumaTotal = 0;
            int num_alea = (int) (Math.random() * (lim_sup - lim_inf) + lim_inf);

            for (int var = 1; var <= cantidad; var ++) {
                sumaTotal += num_alea;
            }

            return sumaTotal;
            
        } 
        
        catch (Exception e) {
            return -1;
        }

    }

    /* 6.	Se requiere una función para simular el sorteo de una lotería, de acuerdo con las siguientes condiciones:

            La lotería tiene 20 premios. 

            Cada premio que calcula el programa debe tener el número de 4 cifras entre 0000 y 9999 acompañado de la serie 
            que es un número entre 100 y 150.

            Ejemplo: 5698-101

            Cada premio lo debe imprimir el programa de la siguiente forma (n representa un número cualquiera):

            Sorteo # nn - Número Premiado nnnn - Serie nnn

            Ejm: Sorteo # 19  - Número Premiado 5698 - Serie 101

            Para tener en cuenta la forma en la cual se informan los 20 resultados: 

            Del premio 20 al 6 el programa imprime: 

            ======PREMIOS MENORES=======
            y la lista de los 15 premios 

            Del premio 5 al 2 el programa imprime:
            ======PREMIOS SECOS=========
            y la lista de los 4 premios secos

            AL llegar al premio 1, el programa imprime:
            ======Premio mayor==========
            Y el premio mayor

            Nota: para sacar el premio mayor calcule el random por cada número, como lo hacen en la realidad los sorteos.

            La función no recibe parámetros y devuelve un string con toda la lista de premios. El main, invoca la función 
            e imprime el resultado que esta arroje. 
 
    */

    public static String loteria(){

        try {

            String resultado = "";
            final int numPremios = 20;
            final int serieMin = 100, serieMax = 150;

            //Premios menores
            resultado += "======PREMIOS MENORES=======\n";
            for (int i = numPremios; i > 5; i--) {
                int numeroPremiado = (int)(Math.random() * 10000); 
                int serie = (int)(Math.random() * (serieMax - serieMin) + serieMin); 
                resultado += "Sorteo # " + i + " - Número Premiado " + String.format("%04d", numeroPremiado) + " - Serie " + serie + "\n";
            }

            //Premios secos
            resultado += "\n======PREMIOS SECOS=========\n";
            for (int i = 5; i > 1; i--) {
                int numeroPremiado = (int)(Math.random() * 10000); 
                int serie = (int)(Math.random() * (serieMax - serieMin) + serieMin); 
                resultado += "Sorteo # " + i + " - Número Premiado " + String.format("%04d", numeroPremiado) + " - Serie " + serie + "\n";
            }

            //Premio mayor
            resultado += "\n======Premio mayor==========\n";
            int numeroPremiadoMayor = (int)(Math.random() * 10000); 
            int serieMayor = (int)(Math.random() * (serieMax - serieMin) + serieMin); 
            resultado += "Sorteo # 1 - Número Premiado " + String.format("%04d", numeroPremiadoMayor) + " - Serie " + serieMayor + "\n";

            return resultado;
            
        } 
        
        catch (Exception e) {
            return "Ocurrió un error en la función";
        }

    }
    
}
